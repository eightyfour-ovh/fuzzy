# GitHub Actions for Symfony: PHP Analysis
name: PHP analysis, tests & build
on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:

jobs:
  composer:
    name: Composer Install (PHP ${{ matrix.php-versions }} on ${{ matrix.operating-system }})
    runs-on: ${{ matrix.operating-system }}
    strategy:
      fail-fast: false
      matrix:
        operating-system: [ubuntu-22.04]
        php-versions: ['8.3']
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: gd, pgsql, pdo_mysql, pdo_pgsql, gmp, fileinfo, intl, opcache, xml, iconv, redis, mailparse
          coverage: xdebug
          tools: composer:v2

      - name: Restore cached files
        id: cache-restore
        uses: actions/cache/restore@v3
        with:
          path: |
            vendor/
            var/cache/
          key: ${{ runner.os }}-PHP${{ matrix.php-versions }}-cache-${{ github.ref }}-${{ hashFiles('**/composer.lock') }}-${{ github.run_id }}
          restore-keys: ${{ runner.os }}-PHP${{ matrix.php-versions }}-cache-${{ github.ref }}-${{ hashFiles('**/composer.lock') }}-

      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader

      - name: PHP Linter (PHPLint)
        run: vendor/bin/phplint --configuration=phplint.yml

      - name: PHP Static Analysis Tool (PHPStan)
        run: vendor/bin/phpstan analyse -c phpstan.neon -vv

      - name: The PHP testing framework (PHPUnit)
        run: vendor/bin/phpunit --coverage-text

      - name: Save cache
        id: cache-save
        uses: actions/cache/save@v3
        with:
          path: |
            vendor/
            var/cache/
          key: ${{ runner.os }}-PHP${{ matrix.php-versions }}-cache-${{ github.ref }}-${{ hashFiles('**/composer.lock') }}-${{ github.run_id }}

  build:
    name: Docker build (& push on main)
    needs: composer
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/eightyfour-ovh/eightyfour
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_LOGIN }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to Github Packages
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.REPO_TOKEN }}

      - name: Build image and push to Docker Hub and GitHub Container Registry
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
